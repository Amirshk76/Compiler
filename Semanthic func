
void writeta()
{
    int i=0;
    int d;
    token *a;
    char r[10];
    a=start->next;
    while(a->next!=NULL)
    {
        if(strcmp(a->tok,"char")==0 || strcmp(a->tok,"float")==0 || strcmp(a->tok,"int")==0 || strcmp(a->tok,"bool")==0)
         {
            strcpy(r,a->tok);
            if(a->next==NULL && a->next->next==NULL)
            break;
            a=a->next;
            while(strcmp(a->tok,";")!=0 && ( strcmp(a->tok,"=")!=0 || !strcmp(a->next->next->tok,",")!=0 ) )
            {
                if(a->tp==identifier)
                {
                    if(searchta(a)==-1 || strcmp(r,"char")==0)
                    {
                        for(d=0;d<strlen(a->tok);d++)
                        {
                            st.att[i][d]=a->tok[d];
                        }
                        for(d=0;d<strlen(r);d++)
                        {
                            st.typ[i][d]=r[d];
                        }

                        if(strcmp(a->next->tok,"=")==0)
                        {
                            {
                                if(strcmp(a->next->next->tok,"'")==0 && strcmp(r,"char")==0)
                                {
                                    for(d=0;d<strlen(a->next->next->tok);d++)
                                    st.value[i][d]=a->next->next->next->tok[d];
                                    a=a->next->next->next->next;
                                }
                                else
                                {
                                    for(d=0;d<strlen(a->next->next->tok);d++)
                                    st.value[i][d]=a->next->next->tok[d];
                                }
                            }
                        }
                    i++;
                    }
                }
                if(a->next==NULL)
                    {
                        break;
                    }
                a=a->next;
            }
         }
         if(a->next==NULL)
            break;
    a=a->next;
    }
}

int searchta(token *a)
{
    int i=0;
    while(strcmpi(st.att[i],"\0")!=0)
    {
        if(strcmp(a->tok,st.att[i])==0)
            {
                error=-1;
                printf("ERROR : In Line %d This identifier '%s' Used  Repeated\n",a->li,a->tok);
                return i;
            }
            i++;
    }
    i=0;
    return -1;
}

int searchtaatt(token *a)
{
    int i=0;
    while(strcmpi(st.att[i],"\0")!=0)
    {
        if(strcmp(a->tok,st.att[i])==0)
            {
                return i;
            }
            i++;
    }
    i=0;
    return -1;
}

int searchtatype(token *a)
{
    int i=0;
    while(strcmpi(st.att[i],"\0")!=0)
    {
        if(strcmp(a->tok,st.typ[i])==0)
            {
                return i;
            }
            i++;
    }
    i=0;
    return 2;
}

int searchtaval(token *a)
{
    int i=0;
    while(strcmpi(st.att[i],"\0")!=0)
    {
        if(strcmp(a->tok,st.att[i])==0 && strcmp(st.value[i],"\0")!=0)
            {
                return i;
            }
            i++;
    }
    i=0;
    return 2;
}

void nahaii(token *a)
{
    char b[10],w[10],v[10];
    token *k;
    int i,g,u,j;
    i=searchtaatt(a);

    if(i==-1)
    {
        error=-1;
        printf("ERROR : In Line %d Unknow identifier '%s' \n",a->li,a->tok);
        return;
    }

    if(a->next==NULL || a->next->next==NULL)
    {
           return ;
    }
    k=a->next->next;

    if(k->next==NULL || k->next->next==NULL)
        {
            return;
        }

    if(strcmp(k->tok,"'")==0)
    {
        strcpy(st.value[i],k->next->tok);
        return;
    }

    if(k->tp==identifier)
    {
        u=searchtaatt(k);

        if(u==-1)
        {
            error=-1;
            printf("ERROR : In Line %d Unknow identifier '%s' \n",a->li,k->tok);
            return;
        }
    }

    if(k->next->next->tp==identifier && (strcmp(k->next->tok,";")!=0 && strcmp(k->next->tok,",")!=0))
    {
        u=searchtaatt(k->next->next);

        if(u==-1)
        {
            error=-1;
            printf("ERROR : In Line %d Unknow identifier '%s' \n",a->li,k->next->next->tok);
            return;
        }
    }

    if(k->tp==num && (strcmp(k->next->tok,";")==0 || strcmp(k->next->tok,",")==0))
        {
            if(typecast(a,k,v)!=-1)
            {
                strcpy(st.value[i],k->tok);
                return ;
            }
            else
            {
                error=-1;
                printf("ERROR : In Line %d type of  '%s' is %s BUT type of Num '%s(%s)' is different\n",a->li,a->tok,st.typ[i],k->tok,v);
                strcpy(st.value[i],"unknown");
                return;
            }
        }

    if(k->tp==identifier && (strcmp(k->next->tok,";")==0 || strcmp(k->next->tok,",")==0))
        {
            g=searchtaatt(k);

            if(strcmp(st.value[g],"\0")==0)
            {
                error=-1;
                printf("ERROR : In Line %d the value of '%s' is unknown now\n",a->li,k->tok);
                return;
            }

            if(!strcmp(st.typ[i],st.typ[g]))
            {
                strcpy(st.value[i],st.value[g]);
                return ;
            }

            else
                {
                    error=-1;
                    printf("ERROR : In Line %d type of  '%s' is %s BUT type of '%s' is '%s'\n",a->li,a->tok,st.typ[i],k->tok,st.typ[g]);
                    return ;
                }
        }

    if(k->next->next==NULL)
        {
            return;
        }

    if(k->tp==num)
       {
           if(typecast(a,k,v)!=-1)
            {
                strcpy(b,k->tok);
            }
            else
            {
                error=-1;
                printf("ERROR : In Line %d type of  '%s' is %s BUT type of Num '%s(%s)' is different\n",a->li,a->tok,st.typ[i],k->tok,v);
                strcpy(st.value[i],"unknown");
                return;
            }

       }

    if(k->tp==identifier)
        {
            j=searchtaatt(k);

            if(strcmp(st.value[j],"\0")==0)
                {
                    error=-1;
                    printf("ERROR : In Line %d the value of '%s' is unknown now\n",a->li,k->tok);
                    return ;
                }
            if(!strcmp(st.typ[i],st.typ[j]))
                {
                    strcpy(b,st.value[j]);
                }
            else
                {
                    error=-1;
                    printf("ERROR : In Line %d type of  '%s' is '%s' BUT type of '%s' is '%s'\n",a->li,a->tok,st.typ[i],k->tok,st.typ[j]);
                    return ;
                }

        }

    if(k->next->next->tp==num)
        {
            if(typecast(a,k->next->next,v)!=-1)
            {
                strcpy(w,k->next->next->tok);
            }
            else
            {
                error=-1;
                printf("ERROR : In Line %d type of  '%s' is %s BUT type of Num '%s(%s)' is different\n",a->li,a->tok,st.typ[i],k->next->next->tok,v);
                strcpy(st.value[i],"unknown");
                return;
            }
        }

    if(k->next->next->tp==identifier)
    {
        j=searchtaatt(k->next->next);
        if(strcmp(st.value[j],"\0")==0)
        {
            error=-1;
            printf("ERROR : In Line %d the value of '%s' is unknown now\n",a->li,k->tok);
            return;
        }
        if(!strcmp(st.typ[i],st.typ[j]))
            {
                strcpy(w,st.value[j]);
            }
        else
            {
                error=-1;
                printf("ERROR : In Line %d type of  '%s' is '%s' BUT type of '%s' is '%s'\n",a->li,a->tok,st.typ[i],k->next->next->tok,st.typ[j]);
                return ;
            }

    }

    if(strcmp(k->next->tok,"+")==0)
    {
        if(strcmp(st.typ[i],"float")==0)
        sprintf(st.value[i],"%f",atof(w)+atof(b));
        if(strcmp(st.typ[i],"int")==0)
        sprintf(st.value[i],"%d",atoi(w)+atoi(b));
        return;
    }

    if(strcmp(k->next->tok,"*")==0)
    {
        if(strcmp(st.typ[i],"float")==0)
        sprintf(st.value[i],"%f",atof(w)*atof(b));
        if(strcmp(st.typ[i],"int")==0)
        sprintf(st.value[i],"%d",atoi(w)*atoi(b));
        return;
    }

    if(strcmp(k->next->tok,"-")==0)
    {
        if(strcmp(st.typ[i],"float")==0)
        sprintf(st.value[i],"%f",atof(w)-atof(b));
        if(strcmp(st.typ[i],"int")==0)
        sprintf(st.value[i],"%d",atoi(w)-atoi(b));
        return;
    }

    if(strcmp(k->next->tok,"/")==0)
    {
        if(strcmp(st.typ[i],"float")==0)
        {
            if(strcmp(w,"0"))
            sprintf(st.value[i],"%f",atof(b)/atof(w));
            else
                {
                    error=-1;
                    printf("ERROR : In Line %d devision by zero isnot permited\n",a->li);
                    return;
                }
        }

        if(strcmp(st.typ[i],"int")==0)
        {
            if(strcmp(w,"0"))
            sprintf(st.value[i],"%d",atoi(b)/atoi(w));
            else
            {
                error=-1;
                printf("ERROR : In Line %d devision by zero isnot permited\n",a->li);
                return 0;
            }
        }
    }
}

void javab()
{
    token *t,*befor;
    t=start->next;
    while(t->next!=NULL)
    {
        befor=t;
        t=t->next;
        if(!strcmp(t->tok,"="))
            {
                nahaii(befor);
            }
    }
}

int typecast(token *a,token *b,char f[10])
{
    int i,j,fla=1;
    i=searchtaatt(a);
    if(strcmp(st.typ[i],"int")==0)
    {
        strcpy(f,"float");
        for(j=0;j<strlen(b->tok);j++)
        {
            if(b->tok[j]=='.')
            {
                fla=-1;
                break;
            }
        }
    }
    if(strcmp(st.typ[i],"float")==0)
    {
        strcpy(f,"int");
        fla=-1;
        for(j=0;j<strlen(b->tok);j++)
        {
            if(b->tok[j]=='.')
            {
                fla=1;
                break;
            }
        }
    }
    return fla;
}
