
void machine (void)
{
tm=start->next;
int sg;
int flag;
int tag;
int chh;
STATEMACHINE:

sg=state(keyword)+state(identifier);
flag=0;
tag=0;
chh=0;

if((strcmp(tm->tok,"if")==0)||(strcmp(tm->tok,"while")==0))
{

if(ncheck(tm))
{

goto END;
}

tm=tm->next;

if (strcmp(tm->tok,"(")==0)
{

if(ncheck(tm->next))
{
goto END;
}

tm=tm->next;

if(tm->tp==identifier)
{

    if(ncheck(tm->next))
    {
    goto END;
    }

tm=tm->next;
//switch(tm->tok)
{
if(tm->tp==operate)
{
    if(ncheck(tm->next))
    {
    goto END;
    }

tm=tm->next;

sg=state(num)+state(identifier);
if(sg==1)
{
    if(ncheck(tm->next))
    {
    goto END;
    }

tm=tm->next;
if(strcmp(tm->tok,")")==0)
{

flag=2;
tag=3;
goto END;
}else
{
    error=-1;
    printf("ERROR : In  Line %d\nexpected to see \" ) \" \n",tm->li);
if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}
goto END;
}

}else
{

error=-1;
printf("ERROR : In  Line %d\nexpected to see number or identifier \n",tm->li);

if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}
goto END;
}

}else
{

    error=-1;
    printf("ERROR : In  Line %d\nexpected to see operator \n",tm->li);

if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}
goto END;
}

}

}else
{
    error=-1;
printf("ERROR : In  Line %d\nexpected to see identifier \n",tm->li);

if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}
    goto END;
    }
}else
    {
        error=-1;
printf("ERROR : In  Line %d\nexpected to see \" ( \" \n",tm->li);
if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}
    goto END;
    }
}

if(strcmp(tm->tok,"void")==0)
{
//void=1;

if(ncheck(tm->next))
{
goto END;
}
tm=tm->next;
if (strcmp(tm->tok,"main")==0)
    {
        if(ncheck(tm->next))
        {
        goto END;
        }

    tm=tm->next;
   if(strcmp(tm->tok,"(")==0)
   {
            if(ncheck(tm->next))
            {
            goto END;
            }

   tm=tm->next;

   if(strcmp(tm->tok,")")==0)
   {
   flag=2;
   tag=3;
   goto END;
   }else
    {
        error=-1;
printf("ERROR : In  Line %d\nexpected to see \" ) \"\n",tm->li);

if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
    printf("\nBut \" %s \" is observed\n",tm->tok);
}
    goto END;
    }


   }else
    {
        error=-1;
printf("ERROR : In  Line %d\nexpected to see \" ( \" \n",tm->li);
if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
    printf("\nBut \" %s \" is observed\n",tm->tok);
}
    goto END;
    }

    }
}

//sg=state(num)+state(identifier);

switch(sg)
{
case 0:
{
tag=1;
if(strcmp(tm->tok,"{")==0 || strcmp(tm->tok,"}")==0)
    {
        goto LAST;
    }
error=-1;
printf("ERROR : Line %d is not completed \n",tm->li);
goto END;
break;
}

case 1 :
{

if(tm->tp==num)
{

error=-1;
printf("ERROR : In Line %d expected to see keyword with identifier or assigning\n ",tm->li);
}

if( strcmp(tm->tok,"char")==0)
{
chh=1;
}

if(tm->tp==keyword)
{
flag=1;
}

INT:

if(ncheck(tm->next))
{
    goto END;
}

tm=tm->next;

//switch(tm->tp)
{
if (tm->tp==identifier && flag==1)// id5:
{
if(ncheck(tm->next))
{
    error=-1;
printf("ERROR : In  Line %d\nexpected to see \" ; \" or \" = \" \n",tm->li);
if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);
}

goto END;
}

tm=tm->next;
//switch(tm->tp)
{
if (strcmp(tm->tok,";")==0)// case ;1:
{
flag=2;
goto END;
break;
}else if (strcmp(tm->tok,"=")==0)//case =2:
{

if(ncheck(tm->next))
{
goto END;
}

tm=tm->next;

switch(tm->tp)
{
//bayad 5 shode bashe!
case num ://num1:
{
if(chh==1)
{
    error=-1;
    printf("\nERROR :  Line %d :Conflicting types for char \n",tm->li);
goto END;
}
if(ncheck(tm->next))
{
goto END;
}

tm=tm->next;
//switch(tm->tp)
{
if (strcmp(tm->tok,"+")==0)//case +1:
{

if(ncheck(tm->next))
{
    goto END;
}

tm=tm->next;
sg=state(2)+state(6);
switch(sg)
{
case 1 :
    {
if(ncheck(tm->next))
{
goto END;
}
    tm=tm->next;
    if(strcmp(tm->tok,";")==0)//tm=";4")
    {
        flag=2;
        goto END;
    }else if (strcmp(tm->tok,",")==0)
    {
    chh=0;
    goto INT;
    }else {
    error=-1;
printf("ERROR : In  Line %d\nexpected to see \" ; \" or \" , \" \n",tm->li);

if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}
        goto END;
    }

    break;
    }

case 0:

    {
    error=-1;
printf("ERROR : In  Line %d\nexpected to see number or identifier \n",tm->li);

if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}
        goto END;
        break;
    }
}
break;
}else if(strcmp(tm->tok,"-")==0)//case -1:
{
if(ncheck(tm->next))
{
goto END;
}

tm=tm->next;
sg=state(num)+state(identifier);
switch(sg)
{
case 1:
    {
if(ncheck(tm->next))
{
goto END;
}
    tm=tm->next;
    if(strcmp(tm->tok,";")==0)//;4
    {
        flag=2;
        goto END;
    }else
    {
        error=-1;
printf("ERROR : In  Line %d\nexpected to see \" ; \" or \" , \" \n",tm->li);
if(ncheck(tm))
{
    printf("\nBut nothing is observed\n");
}else
{
    printf("\nBut \" %s \" is observed\n",tm->tok);
}
    goto END;
    }

    break;
    }

case 0:
    {
        error=-1;
printf("ERROR : In  Line %d\nexpected to see \" identifier \" or \" number \" \n",tm->li);
if(ncheck(tm))
{
    printf("\nBut nothing is observed\n");
}else
{
    printf("\nBut \" %s \" is observed\n",tm->tok);
}
    goto END;
    break;
    }
}

}else if(strcmp(tm->tok,"*")==0)//case *1:
{
if(ncheck(tm->next))
{
goto END;
}
tm=tm->next;
sg=state(num)+state(identifier);
switch(sg)
{
case 1:
    {
if(ncheck(tm->next))
{
goto END;
}
    tm=tm->next;
    if(strcmp(tm->tok,";")==0)//=";4")
    {
        flag=2;
        goto END;
    }else
    {
        error=-1;
printf("ERROR : In  Line %d\nexpected to see \" ; \" or \" , \" \n",tm->li);
if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}
    }
        break;
    }
case 0:
    {
        error=-1;
printf("ERROR : In  Line %d\nexpected to see \" number \" or \" identifier \" \n",tm->li);
if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);
}
        goto END;
        break;
    }
}
break;
}else if(strcmp(tm->tok,"/")==0)//case /1:
{
if(ncheck(tm->next))
{
goto END;
}

tm=tm->next;
sg=state(2)+state(6);
switch(sg)
{
case 1:
    {
if(ncheck(tm->next))
{
goto END;
}
        tm=tm->next;
    if(strcmp(tm->tok,";")==0)//=";4")
    {
        flag=2;
        goto END;
    }else
    {
        error=-1;
printf("ERROR : In  Line %d\nexpected to see \" ; \" or \" , \" \n",tm->li);
if(ncheck(tm))
{
    printf("\nBut nothing is observed\n");
}else
{
    printf("\nBut \" %s \" is observed\n",tm->tok);
}
    goto END;
    }
    break;
    }
case 0:
    {
        error=-1;
printf("ERROR : In  Line %d\nexpected to see \" number \" or \" identifier \" \n",tm->li);
if(ncheck(tm))
{
    printf("\nBut nothing is observed\n");
}else
{
    printf("\nBut \" %s \" is observed\n",tm->tok);

}
        goto END;
        break;
    }
}
break;
}else if (strcmp(tm->tok,",")==0)
{
goto INT;
}else if (strcmp(tm->tok,";")==0)
{
flag=2;
goto END ;
} else
{
    error=-1;
printf("ERROR : In  Line %d\nexpected to see \" ; \" or \" , \" \n",tm->li);
if(ncheck(tm))
{
    printf("\nBut nothing is observed\n");
}else
{
    printf("\nBut \" %s \" is observed\n",tm->tok);
}
goto END;
}
}
break;
}
case identifier : //id4:
{
if(chh==1)
{
    error=-1;
printf("\nERROR :  Line %d :Conflicting types for char \n",tm->li);
goto END;
}

if(ncheck(tm ))
{
goto END;
}

tm=tm->next;

//switch(tm->tp)
{
if(strcmp(tm->tok,"+")==0)//case +2:
{

if(ncheck(tm->next))
{
goto END;
}

tm=tm->next;
switch(sg)
{
case 1:
    {
if(ncheck(tm->next))
{
goto END;
}

    tm=tm->next;
    if(strcmp(tm->tok,";")==0)//";4")

    {
        flag=2;
        goto END;
    //final
    }else if (strcmp(tm->tok,",")==0)
    {
        goto INT;
    }else
        {
            error=-1;
printf("ERROR : In  Line %d\nexpected to see \" ; \" or \" , \" \n",tm->li);

if(ncheck(tm))
{
    printf("\nBut nothing is observed\n");
}else
{
    printf("\nBut \" %s \" is observed\n",tm->tok);
}
    goto END;
        }
    break;
    }

case 0:
    {
    error=-1;
printf("ERROR : In  Line %d\nexpected to see \" identifier \" or \" number \" \n",tm->li);

if(ncheck(tm))
{
    printf("\nBut nothing is observed\n");
}else
{
    printf("\nBut \" %s \" is observed\n",tm->tok);
}
    goto END;
    break;
    }
}
break;
}else if(strcmp(tm->tok,"-")==0)//case -2:
{
if(ncheck(tm->next))
{
goto END;
}

tm=tm->next;
sg=state(num)+state(identifier);
switch(sg)
{
case 1:
    {
if(ncheck(tm->next))
{
goto END;
}

    tm=tm->next;
    if(strcmp(tm->tok,";")==0)//(tm=";4")

    {
        flag=2;
        goto END;
    }else
    {
            error=-1;
printf("ERROR : In  Line %d\nexpected to see \" ; \" or \" , \" \n",tm->li);
if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}
    goto END;
    }
    break;
    }
case 0:
    {
            error=-1;
printf("ERROR : In  Line %d\nexpected to see \" identifier \" or \" number \" \n",tm->li);
if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}
    goto END;
    break;
    }
}
break;
}else if (strcmp(tm->tok,"*")==0)//case *2:
{
if(ncheck(tm->next))
{
goto END;
}

tm=tm->next;
sg=state(num)+state(identifier);
switch(sg)
{
case 1:
    {
if(ncheck(tm->next))
{
goto END;
}
    tm=tm->next;
    if(strcmp(tm->tok,";")==0)//;4
    {
        flag=2;
        goto END;
    }else
    {
        error=-1;
printf("ERROR : In  Line %d\nexpected to see \" ; \" or \" , \" \n",tm->li);
if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}
    goto END;
    }
    break;
    }

case 0:
    {
        error=-1;
printf("ERROR : In  Line %d\nexpected to see \" ; \" or \" , \" \n",tm->li);
if(ncheck(tm))
{
    printf("\nBut nothing is observed\n");
}else
{
    printf("\nBut \" %s \" is observed\n",tm->tok);
}
        goto END;
        break;
    }
}
break;
}else if(strcmp(tm->tok,"/")==0)//case /2:
{
if(ncheck(tm->next))
{
goto END;
}

tm=tm->next;
sg=state(num)+state(identifier);

switch(sg)
{
case 1:
    {
if(ncheck(tm->next))
{
goto END;
}
    tm=tm->next;
    if(strcmp(tm->tok,";")==0)//=";4")
    {
        flag=2;
        goto END;
    }else
    {
        error=-1;
printf("ERROR : In  Line %d\nexpected to see \" ; \" or \" , \" \n",tm->li);
if(ncheck(tm))
{
    printf("\nBut nothing is observed\n");
}else
{
    printf("\nBut \" %s \" is observed\n",tm->tok);

}
    goto END;
    }
    break;
    }

case 0:
    {
        error=-1;
printf("ERROR : In  Line %d\nexpected to see \" number \" or \" identifier \" \n",tm->li);
if(ncheck(tm->next))
{
    printf("\nBut nothing is observed\n");
}else
{
    printf("\nBut \" %s \" is observed\n",tm->tok);
}
    goto END;
    break;
    }
}
break;
}else if(strcmp(tm->tok,";")==0)//case ;3
{
    flag=2;
    goto END;
    break;
} else
    {
        error=-1;
printf("ERROR : In  Line %d\nexpected to see \" ; \" or \" , \" or operator\n",tm->li);
if(ncheck(tm))
{
    printf("\nBut nothing is observed\n");
}else
{
    printf("\nBut \" %s \" is observed\n",tm->tok);
}
    break;
    }
}
break;
}
default:
    {
if (strcmp(tm->tok,"\'")==0)//case '1:
{

if(ncheck(tm->next))
{
    goto END;
}

tm=tm->next;

switch(tm->tp)
{
case identifier : //id3:
{
if(ncheck(tm->next))
{
goto END;
}

tm=tm->next;

{
//switch(tm->tp)
{
if(strcmp(tm->tok,"\'")==0)//case '2:
    {
if(ncheck(tm->next))
{
goto END;
}
    tm=tm->next;

    if (strcmp(tm->tok,";")==0)//tm==;2)
        {
            flag=2;
            goto END;
        }
        else if(strcmp(tm->tok,",")==0)
        {
            goto INT;
        }
        else
        {
            error=-1;
printf("ERROR : In  Line %d\nexpected to see \" ; \" or \" , \" \n",tm->li);
if(ncheck(tm))
{
    printf("\nBut nothing is observed\n");
}else
{
    printf("\nBut \" %s \" is observed\n",tm->tok);
}
        goto END;
    }
    break;
    } else
{
    error=-1;
printf("ERROR : In  Line %d\nexpected to see single quotation",tm->li);
if(ncheck(tm))
{
    printf("\nBut nothing is observed\n");
}else
{
    printf("\nBut \" %s \" is observed\n",tm->tok);
}
goto END;
}

}

}
break;
}

case num :
    {
if(ncheck(tm->next))
{
goto END;
}

tm=tm->next;

{
//switch(tm->tp)
{
if(strcmp(tm->tok,"\'")==0)//case '2:
    {
if(ncheck(tm->next))
{
goto END;
}
    tm=tm->next;
    if (strcmp(tm->tok,";")==0)//tm==;2)
        {
            flag=2;
        goto END;
        }
        else if(strcmp(tm->tok,",")==0){
        goto INT;
        }else
        {
        error=-1;
        printf("ERROR : In  Line %d\nexpected to see \" ; \" or \" , \" \n",tm->li);

if(ncheck(tm))
{
    printf("\nBut nothing is observed\n");
}else
{
    printf("\nBut \" %s \" is observed\n",tm->tok);
}
        goto END;
    }
        break;
    } else
{
    error=-1;
    printf("ERROR : In  Line %d\nexpected to see single quotation\n",tm->li);

if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}

goto END;
}

}

}

}

default:
{
    error=-1;
    printf("ERROR : In  Line %d\nexpected to see \" number \" or \" identifier \" \n",tm->li);
if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}

goto END;
}

}

}else
{
    error=-1;
    printf("ERROR : In  Line %d\nexpected to see single quotation , number , or identifier",tm->li);
if(ncheck(tm))
{
    printf("\nBut nothing is observed\n");
}else
{
    printf("\nBut \" %s \" is observed\n",tm->tok);
}

goto END;
}
    }
}
}else if(strcmp(tm->tok,",")==0)
{
chh=0;
goto INT;
}else{
    error=-1;
    printf("ERROR : In  Line %d\nexpected to see \" ; \" or \" = \" or \" , \" \n",tm->li);

if(ncheck(tm))
{
    printf("\nBut nothing is observed\n");
}else
{
    printf("\nBut \" %s \" is observed\n",tm->tok);
}
    goto END;
    }
}
}else if(strcmp(tm->tok,"=")==0 && flag==0)//case =1:
{

if(ncheck(tm->next))
{
goto END;
}

tm=tm->next;

//switch(tm->tp)

{
if(strcmp(tm->tok,"\'")==0)//case '3:
{

if(ncheck(tm->next))
{
goto END;
}

tm=tm->next;

if(ncheck(tm->next))
{
goto END;
}
tm=tm->next;
if(strcmp(tm->tok,"\'")==0)
{
if(ncheck(tm->next))
{
goto END;
}
tm=tm->next;
if(strcmp(tm->tok,";")==0)
{
    flag=2;
    goto END;
}else
{
    error=-1;
    printf("ERROR : In  Line %d\nexpected to see \" ; \"\n",tm->li);
if(ncheck(tm))
{
    printf("\nBut nothing is observed\n");
}else
{
    printf("\nBut \" %s \" is observed\n",tm->tok);
}
    goto END;
}

}else
{
    error=-1;
    printf("ERROR : In  Line %d\nexpected to see single quotation \n",tm->li);
if(ncheck(tm))
{
    printf("\nBut nothing is observed\n");
}else
{
    printf("\nBut \" %s \" is observed\n",tm->tok);
}
    goto END;
}

}else if(tm->tp==num)//case num: //num6:
{

if(ncheck(tm->next))
{
    goto END;
}

tm=tm->next;

//switch(tm->tp)
{
if(strcmp(tm->tok,"+")==0)//case +4:
{
if(ncheck(tm->next))
{
    goto END;
}

tm=tm->next;
sg=state(num)+state(identifier);

switch(sg)
{
case 1:
    {
if(ncheck(tm->next))
{
goto END;
}
    tm=tm->next;
    if(strcmp(tm->tok,";")==0)//=";8")

    {
    flag=2;
    goto END;
    }
    else
    {
    error=-1;
    printf("ERROR : In  Line %d\nexpected to see \" ; \"\n",tm->li);
if(ncheck(tm))
{
    printf("\nBut nothing is observed\n");
}else
{
    printf("\nBut \" %s \" is observed\n",tm->tok);
}
        goto END;
    }
        break;
    }
case 0:
    {
    error=-1;
    printf("ERROR : In  Line %d\nexpected to see \" number \" or \" identifier \" \n",tm->li);
if(ncheck(tm))
{
    printf("\nBut nothing is observed\n");
}else
{
    printf("\nBut \" %s \" is observed\n",tm->tok);
}
    goto END;
    break;
    }
}

}else if(strcmp(tm->tok,"-")==0)//case -4:
{
if(ncheck(tm->next))
{
    goto END;
}

tm=tm->next;

switch(sg)
{
case 1:
    {
if(ncheck(tm->next))
{
    goto END;
}
    tm=tm->next;
    if(strcmp(tm->tok,";")==0)//=";8")
    {
        flag=2;
        goto END;
    }
    else
    {
    error=-1;
    printf("ERROR : In  Line %d\nexpected to see \" ; \"  \n",tm->li);

if(ncheck(tm))
{
    printf("\nBut nothing is observed\n");
}else
{
    printf("\nBut \" %s \" is observed\n",tm->tok);
}
        goto END;
    }
        break;
    }

case 0:
    {
    error=-1;
    printf("ERROR : In  Line %d\nexpected to see \" ; \"  \n",tm->li);

if(ncheck(tm))
{
    printf("\nBut nothing is observed\n");
}else
{
    printf("\nBut \" %s \" is observed\n",tm->tok);
}
    break;
    }
}

break;
}else if (strcmp(tm->tok,"*")==0)//case *4:
{
if(ncheck(tm->next))
{
goto END;
}

tm=tm->next;
sg=state(num)+state(identifier);
switch(sg)
{
case 1:
    {
if(ncheck(tm->next))
{
goto END;
}

    tm=tm->next;
    if(strcmp(tm->tok,";")==0)//";8")

    {
    //final
    //printf("correct\n");
    flag=2;
    goto END;
    }
    else
    {
    //printf("error\n");
    error=-1;
printf("ERROR : In  Line %d\nexpected to see \" ; \" \n",tm->li);

if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}

    goto END;
    }

    break;
    }

case 0:
    {
    //printf("error\n");
    error=-1;
printf("ERROR : In  Line %d\nexpected to see \" number \" or \" identifier\" \n",tm->li);

if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}

    goto END;
    break;
    }
}

break;
}else if(strcmp(tm->tok,"/")==0)//case /4:
{
if(ncheck(tm->next))
{
goto END;
}

tm=tm->next;
sg=state(num)+state(identifier);
switch(sg)
{
case 1:
    {

if(ncheck(tm->next))
{
goto END;
}
    tm=tm->next;
    if(strcmp(tm->tok,";")==0)//";8")

    {
    //final
   // printf("correct\n");
   flag=2;
    goto END;
    }
    else
    {
    //printf("error\n");
    error=-1;
printf("ERROR : In  Line %d\nexpected to see \" ; \"  \n",tm->li);

if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}

    goto END;
    }

    break;
    }

case 0:
    {
    //printf("error\n");
    error=-1;
printf("ERROR : In  Line %d\nexpected to see \" number \" or \" identifier \" \n",tm->li);

if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}

    goto END;

    break;

    }
}

break;
}else
    {
  //  printf("error\n");

   error=-1;
printf("ERROR : In  Line %d\nexpected to see operator \n",tm->li);

if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}

    goto END;
    break;
    }
}

break;
}else if(tm->tp==identifier)//case identifier ://id10:
{

if(ncheck(tm->next))
{
goto END;
}

tm=tm->next;

//switch(tm->tp)
{
    if(strcmp(tm->tok,";")==0)//case ;8:
{
//final;
//printf("correct");
flag=2;
goto END;
break;
}else if(strcmp(tm->tok,"+")==0)//case +3:
{
if(ncheck(tm->next))
{
goto END;
}

tm=tm->next;
sg=state(num)+state(identifier);
switch(sg)
{
case 1:
    {

if(ncheck(tm->next))
{
goto END;
}

    tm=tm->next;
    if(strcmp(tm->tok,";")==0)//=";7")

    {
    //final
    //printf("correct/n");
    flag=2;
    goto END;
    }
    else
    {
 //   printf("error\n");
  error=-1;
printf("ERROR : In  Line %d\nexpected to see \" ; \" \n",tm->li);

if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}

    goto END;
    }

    break;
    }

case 0:
    {
   //     printf("error\n");
   error=-1;
printf("ERROR : In  Line %d\nexpected to see \" number \" or \" identifier \" \n",tm->li);

if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}

    goto END;
    break;
    }
}

break;
}else if(strcmp(tm->tok,"-")==0)//case -3:

{
if(ncheck(tm->next))
{
goto END;
}

tm=tm->next;
sg=state(num)+state(identifier);
switch(sg)
{
case 1:
    {
if(ncheck(tm->next))
{
goto END;
}

    tm=tm->next;
    if(strcmp(tm->tok,";")==0)//=";7")

    {
    //final
   // printf("correct\n");

   flag=2;
    goto END;
    }
    else
    {
    //printf("error\n");
    error=-1;
printf("ERROR : In  Line %d\nexpected to see \" ; \" \n",tm->li);

if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}

    goto END;
    }

    break;
    }

case 0:
    {
       // default:err
    //printf("error\n");
    error=-1;
printf("ERROR : In  Line %d\nexpected to see \" number \" or \" identifier \" \n",tm->li);

if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}

    goto END;
    break;
    }
}
break;
}else if(strcmp(tm->tok,"*")==0)//case *3:
{
if(ncheck(tm))
{
goto END;
}

tm=tm->next;
sg=state(num)+state(identifier);
switch(sg)
{
case 1:
    {
if(ncheck(tm->next))
{
goto END;
}

    tm=tm->next;
    if(strcmp(tm->tok,";")==0)//=";7")

    {
    //final
   // printf("correct\n");
    flag=2;
    goto END;
    }
    else
    {
   // printf("error\n");
    error=-1;
printf("ERROR : In  Line %d\nexpected to see \" ; \"  \n",tm->li);

if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}

    goto END;
    }

    break;
    }

case 0:
    {
      //  printf("error\n");
       error=-1;
printf("ERROR : In  Line %d\nexpected to see \" number \" or \" identifier \" \n",tm->li);

if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}

        goto END;
        break;
    }
}
break;
}else if(strcmp(tm->tok,"/")==0)//case /3:
{
if(ncheck(tm->next))
{
goto END;
}

tm=tm->next;
sg=state(num)+state(identifier);
switch(sg)
{
case 1:

    {
if(ncheck(tm->next))
{
goto END;
}

    tm=tm->next;
    if(strcmp(tm->tok,";")==0)//=";7")

    {
    //final
    //printf("correct\n");
    flag=2;
    goto END;
    }
    else
    {
    //printf("error\n");
    error=-1;
printf("ERROR : In  Line %d\nexpected to see \" ; \"  \n",tm->li);

if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}

    goto END;
    }

    break;
    }

case 0:
    {
        //default:err
//    printf("error\n");
 error=-1;
printf("ERROR : In  Line %d\nexpected to see number or identifier \n",tm->li);

if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}

    goto END;
    break;
    }
}
break;
}else
    {
    //printf("error\n");
    error=-1;
printf("ERROR : In  Line %d\nexpected to see \" ; \" or operator \n",tm->li);

if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}

    goto END;
    break;
    }
}

break;
}else if(strcmp(tm->tok,"max")==0)//case max:

{

if(ncheck(tm->next))
{
goto END;
}

tm=tm->next;
if(strcmp(tm->tok,"(")==0)
{

if(ncheck(tm->next))
{
goto END;
}

   tm=tm->next;
   if(tm->tp==num)
   {

if(ncheck(tm->next))
{
goto END;
}

   tm=tm->next;
   if(strcmp(tm->tok,",")==0)
   {

if(ncheck(tm->next))
{
goto END;
}

   tm=tm->next;
       if(tm->tp==num)
       {
if(ncheck(tm->next))
{
goto END;
}

       tm=tm->next;
           if(strcmp(tm->tok,")")==0)
           {
if(ncheck(tm->next))
{
goto END;
}

             tm=tm->next;
                 if(strcmp(tm->tok,";")==0)//=";6")
                 {
                    //final
           //      printf("correct\n");
            flag=2;
                 goto END;
                 }else
                        {
                        //printf("error\n");
                        error=-1;
printf("ERROR : In  Line %d\nexpected to see \" ; \"  \n",tm->li);

if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}

                        goto END;
                        }

           }else
            {
           // printf("error\n");
           error=-1;
printf("ERROR : In  Line %d\nexpected to see \" ) \" \n",tm->li);

if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}

            goto END;
            }
       }
   }else
    {
    //printf("error\n");
    error=-1;
printf("ERROR : In  Line %d\nexpected to see \" , \"  \n",tm->li);

if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}

    goto END;
    }

   }
}else
    {
    //printf("error\n");
    error=-1;
printf("ERROR : In  Line %d\nexpected to see \" ( \"  \n",tm->li);

if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}

    goto END;
    }


//break;

}else if(strcmp(tm->tok,"min")==0)//case min:
{

if(ncheck(tm->next))
{
goto END;
}

tm=tm->next;
if(strcmp(tm->tok,"(")==0)//="(")
{
if(ncheck(tm->next))
{
goto END;
}

   tm=tm->next;
   if(tm->tp==num)
   {

if(ncheck(tm->next))
{
goto END;
}

   tm=tm->next;
   if(strcmp(tm->tok,",")==0)//=",")
   {
if(ncheck(tm->next))
{
goto END;
}

   tm=tm->next;
       if(tm->tp==num)
       {

if(ncheck(tm->next))
{
goto END;
}

       tm=tm->next;
           if(strcmp(tm->tok,")")==0)//=")")
           {

if(ncheck(tm->next))
{
goto END;
}

             tm=tm->next;
                 if(strcmp(tm->tok,";")==0)//=";6")
                {
                   // final
                // printf("correct\n");
                flag=2;
                 goto END;
                 }else
                    {
                    //printf("error\n");
                                            error=-1;
printf("ERROR : In  Line %d\nexpected to see \" ; \"  \n",tm->li);

                        if(ncheck(tm))
                        {
                        printf("\nBut nothing is observed\n");
                        }else
                        {
                        printf("\nBut \" %s \" is observed\n",tm->tok);

                        }

                    goto END;
                    }

           }else
            {
            //printf("error\n");
            error=-1;
printf("ERROR : In  Line %d\nexpected to see \" ) \"  \n",tm->li);

if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}

            goto END;
            }
       }else
    {
    //printf("error\n");
    error=-1;
printf("ERROR : In  Line %d\nexpected to see number \n",tm->li);

if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}

    goto END;
    }
   }else
    {
    //printf("error\n");
    error=-1;
printf("ERROR : In  Line %d\nexpected to see \" , \" \n",tm->li);

if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}

    goto END;
    }

   }else
    {
    //printf("error\n");
    error=-1;
printf("ERROR : In  Line %d\nexpected to see number \n",tm->li);

if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}

    goto END;
    }
}else
    {
    //printf("error\n");
    error=-1;
printf("ERROR : In  Line %d\nexpected to see \" ( \"  \n",tm->li);

if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}

    goto END;
    }
//{
//final
//}

//break;

}else{

    //printf("error\n");
    error=-1;
printf("ERROR : In  Line %d\nexpected to see \" max \" , \" min \" , \" identifier \" , \" number \" or \" single quotation \" \n",tm->li);

if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}

    goto END;
    break;
    }
}

//break;
}else
{
//printf("error\n");
error=-1;
printf("ERROR : In  Line %d expected to see keyword with identifier or assigning \n",tm->li);

if(ncheck(tm))
{
printf("\nBut nothing is observed\n");
}else
{
printf("\nBut \" %s \" is observed\n",tm->tok);

}

goto END;
}


}

}

}


END :



 if(flag!=2)
 {
//printf("$$");
LAST :

if(tag==1)
{
//printf("##");
if(strcmp(tm->tok,"{")==0)
{

block++;
    if(ncheck(tm->next))
    {

            error=-1;
printf("ERROR : In Line %d \" { \" is not terminated \n",tm->li);

    goto ENDD;
    }else{
           //printf("$");
           tm=tm->next;
           tag=0;
           goto STATEMACHINE;
            }

}else if(strcmp(tm->tok,"}")==0  )
{

block--;
 if(ncheck(tm->next))
    {
         if(block==0)
        {
        goto ENDD;
        }else{

    if(block>0)
     {
     error=-1;
printf("ERROR : In Line %d extra  \" } \" needed \n",tm->li);
     }

     if(block<0)
     {
    // printf("\n##\n");

     error=-1;
printf("ERROR : In Line %d extra  \" { \" needed \n",tm->li);
     }

            }

    }else{
           tm=tm->next;
           tag=0;
           goto STATEMACHINE;
            }


}else{
error=-1;
printf("ERROR : Line %d is not completed\n",tm->li);
}
}else {

        error=-1;
printf("ERROR : Line %d is not completed\n",tm->li);
        }


 }else
 {


if(!ncheck(tm->next))
{
//if(tm->next->tp==num)
{
//printf("#%s#",tm->next->tok);
tm=tm->next;
tag=0;
goto STATEMACHINE;
/*
if(ncheck(tm->next))
{
error=-1;
printf("ERROR : In Line %d Code could't be terminated by number \n",tm->li);
}
*/
}
}

 if(!ncheck(tm->next))
     {


 if(strcmp(tm->next->tok,"{")==0 && tag==3)
         {
         tm=tm->next;
         block++;

             if(ncheck(tm->next))
             {

             error=-1;
printf("ERROR : In Line %d \" { \" is not terminated \n",tm->li);


             goto ENDD;
             }else
             {
             tm=tm->next;
             tag=0;
             goto STATEMACHINE;
             }

                 }else if(strcmp(tm->next->tok,"}")==0 && tag==3)
        {
        tm=tm->next;
        block--;
        if(ncheck(tm->next))
        {
            if(block==0)
            {
            goto ENDD;
            }else
            {

            error=-1;
printf("ERROR : In Line %d extra  \" } \" needed \n",tm->li);
            goto ENDD;
            }

                }else
                {
                tm=tm->next;
                tag=0;
                goto STATEMACHINE;

                }

        }

     }
    //else{ printf("ERROR:\nline %d needs to be completed\n",tm->li);}



 if(ncheck(tm->next))
 {
 //printf("##");
 goto ENDD ;

 }
 tm=tm->next;
 while(tm->next!=NULL)
 {
     if(strcmp(tm->tok,"\n")!=0)
     {
     tag=0;
     goto STATEMACHINE;
     }
 tm=tm->next;
 }

 }



ENDD :

return;
}

